🛠️ SystemVerilog Projects – University Portfolio

This collection includes all my SystemVerilog-based hardware design projects completed during my university studies.
These projects span digital games, VGA graphics, FSM design, error-correcting codes, sorting networks,
and even hardware security mechanisms.

Each project was written, simulated, and (where applicable) synthesized for FPGA deployment (Nexys A7 board).

──────────────────────────────────────────────

🎮 Rock-Paper-Scissors (FPGA)

A simple combinational logic game that reads inputs from two players (3-bit one-hot encoded: Scissors, Rock, Paper)
and outputs the result: Win, Lose, Tie, or Invalid Move.

🔧 Features:
- Modular design: `winnerA`, `winnerB`, `checkTie`, `validIO`
- Purely combinational logic
- Testbenches with GTKWave-compatible dumps
- FPGA-ready with `.xdc` constraints

──────────────────────────────────────────────

🎨 VGA-Based Interactive Projects (FPGA)

Projects focused on real-time VGA graphics and user interaction, tested on a Nexys A7 FPGA board.

1️⃣ VGA 4-Square Display
- VGA timing generation for 800x600 @ 72Hz
- Displays 4 distinct colored rectangles
- Clean sync pulse generation and pixel logic

2️⃣ VGA Tic-Tac-Toe (2-Player)
- Grid rendered on VGA screen
- Controls via 5 FPGA buttons
- ROM-based 'X' and 'O' symbols
- Real-time win/tie detection

3️⃣ VGA Tic-Tac-Toe with AI
- Single-player mode with AI opponent
- AI picks optimal move using simple priority logic
- Same visual and control system as 2-player version

📁 Includes: `top.sv`, `MoveGen.sv`, ROMs, edge detectors, constraints

──────────────────────────────────────────────

🖥️ Small SystemVerilog Projects

A collection of compact designs focused on core digital concepts and verification strategies.

🖥️ FSM Server Resource Controller
- Finite state machine managing max 3 server users
- Models connect/disconnect logic with a 2-bit input
- Demonstrates FSM transitions and output gating

🧮 Hamming Code (15,11) Encoder
- Serial input/output encoder
- Computes 4 parity bits + 11 data bits ➝ 15-bit codeword
- Bitwise parity logic and internal counters

🛰️ Network Switch with Arbitration
- 4 input data + request lines
- Routes data only when exactly one request is active
- Covers cases of no or multiple requests

📊 Odd-Even Merge Sorter
- 5-module sorter network using comparators
- Outputs max, min, second_max, second_min of 4 inputs
- Wrapper includes input/output registers to remove combinational paths

🛡️ Trojan-Based Hardware Design
- Simulates a malicious logic block inside a valid/ready handshake system
- Trojan blocks data when flush = 1
- Includes testbench for security validation

──────────────────────────────────────────────

💡 Tools Used Across Projects:
- SystemVerilog simulation (ModelSim / Vivado Simulator)
- GTKWave waveform viewer
- Nexys A7 FPGA board (100 MHz clock)
- Xilinx Vivado for synthesis + constraint mapping
- ROM-based graphics rendering
- Modular and test-driven HDL design

──────────────────────────────────────────────

These projects collectively demonstrate my hands-on skills in:
✔️ Combinational and sequential logic design  
✔️ Finite State Machines  
✔️ Pixel-based rendering and VGA timing  
✔️ Testbench development and simulation  
✔️ Hardware communication protocols  
✔️ FPGA constraint and button/signal mapping  
✔️ Introductory AI decision logic (in hardware!)  
✔️ Digital security awareness through Trojan simulation  

Each design helped me build confidence in modular hardware design, verification, and deployment using SystemVerilog.

